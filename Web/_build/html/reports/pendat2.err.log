Traceback (most recent call last):
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\asyncio\base_events.py", line 691, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\raiha\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import psycopg2
import pymysql
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.neighbors import NearestNeighbors

# âœ… Fungsi untuk mengambil data dari PostgreSQL
def get_pg_data():
    conn = psycopg2.connect(
        host="pg-29vania-vaniaptr008-f94a.k.aivencloud.com",
        user="avnadmin",
        password="AVNS_jN7GWD4QIOAFWBZiFM2",
        database="defaultdb",
        port=12525
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM iris_postgresql")  # Pastikan tabel ini ada!
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()
    return pd.DataFrame(data, columns=columns)

# âœ… Fungsi untuk mengambil data dari MySQL
def get_mysql_data():
    conn = pymysql.connect(
        host="mysql-25907135-mysqql.h.aivencloud.com",
        user="avnadmin",
        password="AVNS_-_iUzbq84ojauwfvOBS",
        database="defaultdb",
        port=12005
    )
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM iris_mysql")  # Pastikan tabel ini ada!
    data = cursor.fetchall()
    columns = [desc[0] for desc in cursor.description]
    cursor.close()
    conn.close()
    return pd.DataFrame(data, columns=columns)

# âœ… Ambil data dari kedua database
df_postgresql = get_pg_data()
df_mysql = get_mysql_data()

# âœ… Gabungkan berdasarkan kolom 'id' & 'class'
df_merged = pd.merge(df_mysql, df_postgresql, on=["id", "class"], how="inner")

# âœ… Ambil data fitur numerik
feature_columns = ["petal_length", "petal_width", "sepal_length", "sepal_width"]
data_values = df_merged[feature_columns].values

# âœ… Fungsi KNN Outlier Detection
def knn_outlier_detection(data, k=90):
    neigh = NearestNeighbors(n_neighbors=k)
    neigh.fit(data)
    distances, _ = neigh.kneighbors(data)
    avg_distances = distances[:, -1]  # Ambil jarak k-terjauh sebagai skor
    return avg_distances

# âœ… Hitung K-NN distance
df_merged["knn_distance"] = knn_outlier_detection(data_values, k=90)

# âœ… Tentukan threshold sebagai nilai rata-rata + 2 standar deviasi
threshold = df_merged["knn_distance"].mean() + 2 * df_merged["knn_distance"].std()
df_merged["outlier_knn"] = df_merged["knn_distance"] > threshold

# âœ… Hapus data outlier
df_filtered = df_merged[~df_merged["outlier_knn"]]

# âœ… Cetak hasil setelah outlier dihapus
print(df_filtered.to_string(index=False))
print(f"\nJumlah data setelah outlier dihapus: {len(df_filtered)}")

# âœ… Visualisasi setelah outlier dihapus
plt.figure(figsize=(8, 6))
sns.scatterplot(
    x=df_filtered["sepal_length"], y=df_filtered["sepal_width"],
    hue=df_filtered["class"], palette="deep"
)
plt.title("Data Sepal setelah Outlier Dihapus")
plt.show()

plt.figure(figsize=(8, 6))
sns.scatterplot(
    x=df_filtered["petal_length"], y=df_filtered["petal_width"],
    hue=df_filtered["class"], palette="deep"
)
plt.title("Data Petal setelah Outlier Dihapus")
plt.show()
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mTimeoutError[0m                              Traceback (most recent call last)
File [1;32m~\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\pymysql\connections.py:649[0m, in [0;36mConnection.connect[1;34m(self, sock)[0m
[0;32m    648[0m [38;5;28;01mtry[39;00m:
[1;32m--> 649[0m     sock [38;5;241m=[39m [43msocket[49m[38;5;241;43m.[39;49m[43mcreate_connection[49m[43m([49m
[0;32m    650[0m [43m        [49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mhost[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mport[49m[43m)[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconnect_timeout[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m
[0;32m    651[0m [43m    [49m[43m)[49m
[0;32m    652[0m     [38;5;28;01mbreak[39;00m

File [1;32mC:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\socket.py:865[0m, in [0;36mcreate_connection[1;34m(address, timeout, source_address, all_errors)[0m
[0;32m    864[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m all_errors:
[1;32m--> 865[0m     [38;5;28;01mraise[39;00m exceptions[[38;5;241m0[39m]
[0;32m    866[0m [38;5;28;01mraise[39;00m ExceptionGroup([38;5;124m"[39m[38;5;124mcreate_connection failed[39m[38;5;124m"[39m, exceptions)

File [1;32mC:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.12_3.12.2800.0_x64__qbz5n2kfra8p0\Lib\socket.py:850[0m, in [0;36mcreate_connection[1;34m(address, timeout, source_address, all_errors)[0m
[0;32m    849[0m     sock[38;5;241m.[39mbind(source_address)
[1;32m--> 850[0m [43msock[49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43msa[49m[43m)[49m
[0;32m    851[0m [38;5;66;03m# Break explicitly a reference cycle[39;00m

[1;31mTimeoutError[0m: timed out

During handling of the above exception, another exception occurred:

[1;31mOperationalError[0m                          Traceback (most recent call last)
Cell [1;32mIn[1], line 45[0m
[0;32m     43[0m [38;5;66;03m# âœ… Ambil data dari kedua database[39;00m
[0;32m     44[0m df_postgresql [38;5;241m=[39m get_pg_data()
[1;32m---> 45[0m df_mysql [38;5;241m=[39m [43mget_mysql_data[49m[43m([49m[43m)[49m
[0;32m     47[0m [38;5;66;03m# âœ… Gabungkan berdasarkan kolom 'id' & 'class'[39;00m
[0;32m     48[0m df_merged [38;5;241m=[39m pd[38;5;241m.[39mmerge(df_mysql, df_postgresql, on[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mid[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mclass[39m[38;5;124m"[39m], how[38;5;241m=[39m[38;5;124m"[39m[38;5;124minner[39m[38;5;124m"[39m)

Cell [1;32mIn[1], line 28[0m, in [0;36mget_mysql_data[1;34m()[0m
[0;32m     27[0m [38;5;28;01mdef[39;00m [38;5;21mget_mysql_data[39m():
[1;32m---> 28[0m     conn [38;5;241m=[39m [43mpymysql[49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m
[0;32m     29[0m [43m        [49m[43mhost[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mmysql-25907135-mysqql.h.aivencloud.com[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m     30[0m [43m        [49m[43muser[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mavnadmin[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m     31[0m [43m        [49m[43mpassword[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mAVNS_-_iUzbq84ojauwfvOBS[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m     32[0m [43m        [49m[43mdatabase[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mdefaultdb[39;49m[38;5;124;43m"[39;49m[43m,[49m
[0;32m     33[0m [43m        [49m[43mport[49m[38;5;241;43m=[39;49m[38;5;241;43m12005[39;49m
[0;32m     34[0m [43m    [49m[43m)[49m
[0;32m     35[0m     cursor [38;5;241m=[39m conn[38;5;241m.[39mcursor()
[0;32m     36[0m     cursor[38;5;241m.[39mexecute([38;5;124m"[39m[38;5;124mSELECT * FROM iris_mysql[39m[38;5;124m"[39m)  [38;5;66;03m# Pastikan tabel ini ada![39;00m

File [1;32m~\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\pymysql\connections.py:361[0m, in [0;36mConnection.__init__[1;34m(self, user, password, host, database, unix_socket, port, charset, collation, sql_mode, read_default_file, conv, use_unicode, client_flag, cursorclass, init_command, connect_timeout, read_default_group, autocommit, local_infile, max_allowed_packet, defer_connect, auth_plugin_map, read_timeout, write_timeout, bind_address, binary_prefix, program_name, server_public_key, ssl, ssl_ca, ssl_cert, ssl_disabled, ssl_key, ssl_key_password, ssl_verify_cert, ssl_verify_identity, compress, named_pipe, passwd, db)[0m
[0;32m    359[0m     [38;5;28mself[39m[38;5;241m.[39m_sock [38;5;241m=[39m [38;5;28;01mNone[39;00m
[0;32m    360[0m [38;5;28;01melse[39;00m:
[1;32m--> 361[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mconnect[49m[43m([49m[43m)[49m

File [1;32m~\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\LocalCache\local-packages\Python312\site-packages\pymysql\connections.py:716[0m, in [0;36mConnection.connect[1;34m(self, sock)[0m
[0;32m    714[0m     [38;5;28;01mif[39;00m DEBUG:
[0;32m    715[0m         [38;5;28mprint[39m(exc[38;5;241m.[39mtraceback)
[1;32m--> 716[0m     [38;5;28;01mraise[39;00m exc
[0;32m    718[0m [38;5;66;03m# If e is neither DatabaseError or IOError, It's a bug.[39;00m
[0;32m    719[0m [38;5;66;03m# But raising AssertionError hides original error.[39;00m
[0;32m    720[0m [38;5;66;03m# So just reraise it.[39;00m
[0;32m    721[0m [38;5;28;01mraise[39;00m

[1;31mOperationalError[0m: (2003, "Can't connect to MySQL server on 'mysql-25907135-mysqql.h.aivencloud.com' (timed out)")

